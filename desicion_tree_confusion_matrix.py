# -*- coding: utf-8 -*-
"""Desicion tree_Matrix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jc9Er4hvooPOq9oGVUgZbCjjRCP4pzpA
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Sample data as a 2D array
confusion_matrix_dt_data= [[3.730e+03, 1.410e+02, 2.000e+00, 8.100e+01, 6.200e+01,4.000e+00, 4.630e+02,
  0.000e+00],
 [2.710e+02, 1.402e+03, 1.024e+03, 5.710e+02, 3.990e+02, 1.280e+02, 5.030e+0,
  3.240e+02],
 [3.900e+01, 4.750e+02, 2.231e+03, 1.730e+02 ,8.700e+01, 5.800e+01, 1.520e+02,
  1.234e+03],
 [1.290e+02, 9.600e+01, 5.600e+01, 2.579e+03, 4.690e+02 ,8.000e+02,3.660e+02,
  0.000e+00],
 [1.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 2.957e+03, 1.143e+03, 3.780e+02,
  0.000e+00],
 [0.000e+00, 0.000e+00 ,0.000e+00, 0.000e+00, 1.497e+03, 2.473e+03, 5.320e+02,
  0.000e+00],
 [4.840e+02, 3.300e+01, 5.700e+01, 2.800e+01, 1.142e+03 ,2.420e+02, 2.552e+03,
  0.000e+00],
 [1.800e+01, 8.800e+01 ,3.000e+00 ,7.800e+01, 4.000e+00,7.000e+00 ,5.000e+01,
  4.337e+03]]



# Convert to DataFrame
confusion_matrix_dt_cv = pd.DataFrame(confusion_matrix_dt_data)

# Set index and column names
confusion_matrix_dt_cv.index.name = 'Actual'
confusion_matrix_dt_cv.columns.name = 'Predicted'
confusion_matrix_dt_cv = pd.DataFrame(confusion_matrix_dt_data, index=["1", "2", "3", "4", "5" , "6", "7", "8"], columns=["1", "2", "3", "4", "5" , "6", "7", "8"])

# Plot heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix_dt_cv, annot=True, fmt=".0f", cmap="YlGnBu")
plt.xlabel("Predicted")
plt.ylabel("True Label")
plt.title(" Desicion Tree Cross Validation Confusion Matrix")
plt.show()

# Sample data as a 2D array
confusion_matrix_dt_tv_data= [[3.730e+03, 1.410e+02, 2.000e+00, 8.100e+01 ,6.200e+01, 4.000e+00, 4.630e+02,
  0.000e+00],
 [2.710e+02, 1.408e+03, 1.023e+03, 5.710e+02, 3.990e+02, 1.280e+02 ,5.030e+02,
  3.190e+02],
 [3.900e+01, 4.750e+02, 2.231e+03, 1.730e+02 ,8.700e+01, 5.800e+01, 1.520e+02,
  1.234e+03],
 [1.290e+02, 9.600e+01 ,5.600e+01, 2.579e+03 ,4.690e+02, 8.000e+02 ,3.660e+02,
  0.000e+00],
 [1.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 2.957e+03, 1.143e+03, 3.780e+02,
  0.000e+00],
 [0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 1.497e+03, 2.473e+03, 5.320e+02,
  0.000e+00],
 [4.820e+02 ,3.300e+01, 5.700e+01, 2.800e+01, 1.142e+03, 2.420e+02, 2.554e+03,
  0.000e+00],
 [1.800e+01, 8.800e+01, 3.000e+00, 7.800e+01, 4.000e+00, 7.000e+00, 5.000e+01,
  4.337e+03]]



# Convert to DataFrame
confusion_matrix_dt_tv = pd.DataFrame(confusion_matrix_dt_tv_data)

# Set index and column names
confusion_matrix_dt_tv.index.name = 'Actual'
confusion_matrix_dt_tv.columns.name = 'Predicted'
confusion_matrix_dt_tv = pd.DataFrame(confusion_matrix_dt_tv_data, index=["1", "2", "3", "4", "5" , "6", "7", "8"], columns=["1", "2", "3", "4", "5" , "6", "7", "8"])

# Plot heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix_dt_tv, annot=True, fmt=".0f", cmap="YlGnBu")
plt.xlabel("Predicted")
plt.ylabel("True Label")
plt.title(" Desicion Tree Train Validation Confusion Matrix")
plt.show()